/* 
! DISPLAY IN CSS


TODO : Block-Level Elements:

display: block - The block value makes the element a block-level element. 
Block-level elements create a new "block formatting context" and take up the full width available. 
They start on a new line, pushing subsequent elements below them.

New Line Starts: They start on a new line in the webpage layout.

Full Width: They often take up the entire width of their container.

No Side-by-Side: They wonâ€™t sit next to each other horizontally.
Common Examples: Include paragraphs, headings, lists, and containers.

Use Cases:
Creating standalone elements like paragraphs, headings, divs and dividers,
Structuring main content of webpage such as articles or sections.

TODO :  Inline Elements:

âœ… display: inline ðŸ‘‰ The inline value makes the element an inline-level element. 
Inline elements only take up as much width as necessary,
 and they do not create a new block formatting context. 
 Inline elements can appear on the same line as other inline elements.

ðŸ‘‰ Inline Flow: They flow within the content and don't start on new lines.
ðŸ‘‰ Efficient: They take up only as much width as necessary.
ðŸ‘‰ Side-by-Side: They can sit next to each other horizontally.
Common Examples include links, spans, and emphasis tags.
Text Enhancements: Often used for styling text or adding small inline elements.

# Use Cases:
Styling text elements like links (<a>) or spans within paragraphs.
Displaying elements side by side within a paragraph.

/*todo Inline-Block Elements: */
/* display: inline-block ðŸ‘‰ The inline-block value combines aspects of both block and inline.
Elements with inline-block behave like inline elements but can have dimensions (width and height) and vertical alignment. âœ…

- Mixed Behavior: They combine aspects of both inline and block elements.

- Width and Height: You can set their dimensions (width and height).

- In-Line Flow: They can sit next to each other horizontally.

- Space-Efficient: They take up only as much width as necessary.

- Common Examples: Used for creating custom-styled buttons, images with captions, etc.


Use Cases :
Creating custom-styled buttons.
Displaying images with captions or descriptions next to them
*/

*{
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;
    font-family: "Urbanist";
    
}
body{
    background-color: hsl(0, 0%, 94%);
    height: 100vh;
}
#main-heading{
    font-size: 64px;
    text-align: left;
    color: #1e1403;
    margin-bottom: 30px;
}

p{
    
    font-size: 24px;
    letter-spacing: 1.5px;
    word-spacing: 2px;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    border-radius: 5px;
    color: #fff;
    background-image: linear-gradient(to right, #182848, #4b6cb7);
    /* color: #1e1403; */
    padding: 50px;
    margin-bottom: 20px;
    /* so on applying dimension block elements works */
}
a{
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
    font-size: 24px;
    letter-spacing: 1.5px;
    word-spacing: 2px;
    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
    border-radius: 5px;
    color: #fff;
    background-image: linear-gradient(to right, #182848, #4b6cb7);

    /* lets gve some dimension to see whether it works in inline elements or not  */
    width: 300px;
    height: 100px;
    /* no it wont work;;;; */

    /* we can give padding ... WAIT.... it also hv a issue 
    ? we can give only right and left padding  */
    padding: 10px;   /*padding also have a issue */
    margin-top: 100px;  /*this margin top and botom is not working but left-right works...   */
    border: 1px solid red;
    margin-right: 10px;

/* so to cope this issue we have display: inline-block */

    display: inline-block;
    /* now we can see that all the margin / dimension property is working  */
    /* so always write this property whenever use inline element so that we can get these property */

}



p:nth-of-type(2),
a:nth-of-type(2),
.inline-block-elem:last-child{
    background-image: linear-gradient(to right, #514a9d,#24c6dc);
}

/* a:first-of-type{
    margin-right: 50px;
} */


/* 
!    Interview Questions
-------------------------------

1: What is the main difference between display: block; and display: inline; elements in CSS?

2: What does display: none; do to an element's accessibility?
It makes the element completely inaccessible to screen readers and keyboard navigation.

3: How do you center an element horizontally using display: block;?
To center a display: block; element horizontally, you can set its left and right margins to auto.

4: What is the default behavior of display: inline; elements with regard to margins and padding?
display:inline elements don't respect top and bottom margins or padding.

*/